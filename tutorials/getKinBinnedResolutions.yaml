baseoutpath: "out_" #NOTE: This will be prepended to the default output path like so: `<baseoutpath><binscheme_name>.csv`.
inpath: "file.root"
tree: "t"
nthreads: 1
cuts: "mass_ppim<1.24 && Q2>1 && W>2 && y<0.8 && xF_ppim>0.0 && z_ppim<1.0 && detector_p==6 && detector_pim==6"
inject_res: true
inject_seed: 2
mc_cuts: "sqrt(px_e*px_e+py_e*py_e+pz_e*pz_e)>2.0 && vz_e>-25.0 && vz_e<20.0" #NOTE: This cut is preapplied on data skim but not in MC
particle_suffixes: ["_p","_pim"]
combined_spin_state: "ss"
helicity_name: "heli"
helicity_formula: "(float)0.0"
helicity_states:
  plus: 1
  zero: 0
  minus: -1
tspin_name: "tspin"
tspin_formula: "(float)0.0"
tspin_states:
  plus: 1
  zero: 0
  minus: -1
htspin_name: "htspin"
htspin_states:
  plus: 1
  zero: 0
  minus: -1
var_formulas: #NOTE: Variable definitions will be applied in order in case of dependencies, and they should follow the form [variable_name,formula].
  - ["p_p","(float)(sqrt(px_p*px_p+py_p*py_p+pz_p*pz_p))"]
  - ["p_pim","(float)(sqrt(px_pim*px_pim+py_pim*py_pim+pz_pim*pz_pim))"]
  - ["p_p_mc","(float)(sqrt(px_p_mc*px_p_mc+py_p_mc*py_p_mc+pz_p_mc*pz_p_mc))"]
  - ["p_pim_mc","(float)(sqrt(px_pim_mc*px_pim_mc+py_pim_mc*py_pim_mc+pz_pim_mc*pz_pim_mc))"]
  - ["dp_p","(float)((p_p-p_p_mc)/(p_p_mc))"]
  - ["dp_pim","(float)((p_pim-p_pim_mc)/(p_pim_mc))"]
binschemes: #NOTE: Structure for bin schemes is { binscheme_name: { binvar_name: [binlimits] } }
  p_p_mc:
    p_p_mc: [0.0, 0.2, 0.4, 0.5, 0.8, 2.0, 11.0]
  p_pim_mc:
    p_pim_mc: [0.0, 0.2, 0.4, 0.5, 0.8, 2.0, 11.0]
binschemes_paths: [""] #NOTE: You can alternately load a bin scheme from another YAML file if you do not put a map under `binschemes` above.
nbatches: 1 #NOTE: You can batch all bin schemes if they are large to allow for parellelization
ibatch: 0 #NOTE: Specify the bin scheme batch index here
binvars: ["p_p_mc","p_pim_mc"]
binvar_titles: ["p_{p,MC}","p_{#pi^{-},MC}"]
binvar_lims: [[0,11],[0,11]]
binvar_bins: [16,16]
depolvars: ["y"]
depolvar_titles: ["y"]
depolvar_lims: [[0,1]]
depolvar_bins: [16]
resfitvars: ["dp_p","dp_pim","dtheta_p","dtheta_pim","dphi_p","dphi_pim"]
resfitvar_titles: ["#Delta p_{p} / p_{p,MC}","#Delta p_{#pi^{-}} / p_{#pi^{-},MC}","#Delta #theta_{p}","#Delta #theta_{#pi^{-}}","#Delta #phi_{p}","#Delta #phi_{#pi^{-}}"]
resfitvar_lims: [[-1,1],[-1,1],[-1,1],[-1,1],[-1,1],[-1,1]]
resfitvar_bins: [16,16,16,16,16,16]
massfitvars: ["mass_ppim"]
massfitvar_titles: ["M_{p#pi^{-}} (GeV)"]
massfitvar_lims: [[1.08,1.24]]
massfitvar_bins: [100]
mc_suffix: "_mc"
yamlfile_map: #NOTE: You can specify a map of bin scheme (string) unique ids to yaml file paths specifying the remaining resolution fit arguments {`scheme_<scheme_name>_bin_<bin_idx>` -> <YAML_PATH> }.
pdf_name: "gauss" #NOTE: A mass fit and background correction will only be used if this is not empty.
fitformula: "gaus(x[0],x[1],x[2],x[3])" #NOTE: This is parsed by RooGenericPdf using TFormula
parnames: ["constant","mu","sigma"]
partitles: ["C","#mu","#sigma"]
parunits: ["","",""]
parinits: [0.0, 0.1]
parlims: [ [-1.0, 1.0], [0.0, 1.0] ]
lg_text_size: 0.04
lg_margin: 0.1
lg_ncols: 1
plot_bg_pars: false
use_sumw2error: false
use_extended_nll: true
use_binned_fit: false
logpath: "out.txt"
